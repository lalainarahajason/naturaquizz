generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  quizzes               Quiz[]
  twoFactorConfirmation TwoFactorConfirmation?
  quizResults           UserQuizResult[]       @relation("UserQuizResult")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quiz {
  id              String           @id @default(cuid())
  title           String
  slug            String           @unique
  description     String
  image           String?
  authorId        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  questions       Question[]
  author          User             @relation(fields: [authorId], references: [id])
  userQuizResults UserQuizResult[]
}

model Question {
  id       String   @id @default(cuid())
  question String
  note     String?
  image    String?
  timer    Int      @default(60)
  quizId   String?
  answers  Answer[] @relation("QuestionToAnswer")
  quiz     Quiz?    @relation(fields: [quizId], references: [id])
}

model Answer {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  order      Int
  questionId String
  question   Question @relation("QuestionToAnswer", fields: [questionId], references: [id], onDelete: Cascade)
}

model UserQuizResult {
  id             String   @id @default(cuid())
  userId         String
  quizId         String
  completedAt    DateTime @default(now())
  correctAnswers Int
  totalQuestions Int
  quiz           Quiz     @relation(fields: [quizId], references: [id])
  user           User     @relation("UserQuizResult", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
}

enum UserRole {
  USER
  PREMIUM
  ADMIN
}
