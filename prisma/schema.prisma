datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  PREMIUM
  ADMIN
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  role          UserRole @default(USER)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // quiz
  quizzes       Quiz[]
  quizResults   UserQuizResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id  String  @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id  String  @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id  String  @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id  String  @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Quiz
model Quiz {
  
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String
  image       String?
  questions   Question[]
  
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String

  userQuizResults UserQuizResult[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

}

model Question {
  id       String   @id @default(cuid())
  question String
  image    String?
  timer    Int      @default(60)
  answers  Answer[]
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  quizId   String
}

model Answer {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  order      Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model UserQuizResult {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  quiz           Quiz     @relation(fields: [quizId], references: [id])
  quizId         String
  completedAt    DateTime @default(now())
  correctAnswers Int
  totalQuestions Int

  @@unique([userId, quizId])
}